
node ('ec2_java_maven') {
    withCredentials([file(credentialsId: '6ad0a02e-19c2-4824-bb25-3c751a383d10', variable: 'MVN_SETTINGS_XML')]) {
    
        withEnv([
            "JAVA_HOME=${tool 'oracle-jdk-8'}",
            "PATH+MAVEN=${tool 'maven-3.3.9'}/bin:${env.JAVA_HOME}/bin",
            "MVN_SETTINGS_XML=${env.MVN_SETTINGS_XML}",
            
             // Versioning Info for both KFS and Rice, i.e. 52 for release 52.
            "RELEASE_VERSION=${env.RELEASE_VERSION}",

            // Jira release ticket for commit messaging.
            "RELEASE_TICKET=${env.RELEASE_TICKET}",

             // Rice release version info, prefix i.e 2.6.0-ua-release
            "RELEASE_PREFIX_RICE=${env.RELEASE_PREFIX_RICE}",
            "RICE_RELEASE_VERSION=${env.RELEASE_PREFIX_RICE}${env.RELEASE_VERSION}",           

            // KFS release version info , prefix i.e 7.20170511-ua-release
            "RELEASE_PREFIX_KFS=${env.RELEASE_PREFIX_KFS}",
            "KFS_RELEASE_VERSION=${env.RELEASE_PREFIX_KFS}${env.RELEASE_VERSION}",

            // TODO: REMOVE RCF BEING USED FOR DEBUG/TESTING
            // Source Control Info  
            // Rice
            "RICE_REPO_URL=https://github.com/ua-eas/ksd-kc5.2.1-rice",
            "RICE_DEV_BRANCH=rf-rice-2.6-ua-development",
            "RICE_MASTER_BRANCH=rf-rice-2.6-ua-master",
            "RICE_RELEASE_BRANCH=rf-${env.RELEASE_PREFIX_RICE}${env.RELEASE_VERSION}",

            // KFS
            "KFS_REPO_URL=https://github.com/ua-eas/financials.git",
            "KFS_DEV_BRANCH=rf-ua-development",
            "KFS_MASTER_BRANCH=rf-ua-master",
            "KFS_RELEASE_BRANCH=rf-${env.RELEASE_PREFIX_KFS}${env.RELEASE_VERSION}"
        ]) 
        
        // Begin stages
        {
            // Print out variables.
            stage ('Info') {
                // RCF Adding INFO messages.
                echo "DBG: JAVA_HOME: $JAVA_HOME\nDBG: PATH+MAVEN: $PATH+MAVEN\nDBG: MVN_SETTINGS_XML: $MVN_SETTINGS_XML"
                echo "DBG: RELEASE_VERSION: $RELEASE_VERSION\nDBG: RELEASE_TICKET: $RELEASE_TICKET\nDBG: RELEASE_PREFIX_RICE: $RELEASE_PREFIX_RICE\nDBG: RICE_RELEASE_VERSION: $RICE_RELEASE_VERSION"                    
                echo "DBG: RELEASE_PREFIX_KFS: $RELEASE_PREFIX_KFS\nDBG: KFS_RELEASE_VERSION: $KFS_RELEASE_VERSION" 
                                    
                echo "DBG: RICE_REPO_URL: $RICE_REPO_URL"
                echo "DBG: RICE_DEV_BRANCH: $RICE_DEV_BRANCH"
                echo "DBG: RICE_MASTER_BRANCH: $RICE_MASTER_BRANCH"
                echo "DBG: RICE_RELEASE_BRANCH: $RICE_RELEASE_BRANCH"

                echo "DBG: KFS_REPO_URL: $KFS_REPO_URL"
                echo "DBG: KFS_DEV_BRANCH: $KFS_DEV_BRANCH"
                echo "DBG: KFS_MASTER_BRANCH: $KFS_MASTER_BRANCH"
                echo "DBG: KFS_RELEASE_BRANCH: $KFS_RELEASE_BRANCH"
            }
            // This takes everything on the develop branch into a new 'release' branch.
            stage ('Create Rice Release Branch') {
                withCredentials([usernamePassword(credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    
                    cleanWs()                      
                    checkout([$class: 'GitSCM', branches: [[name: "*/$RICE_DEV_BRANCH"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', url: env.RICE_REPO_URL]]])
                    sh "git config user.name $GIT_USERNAME"
                    sh 'git config user.email katt-toolsadm@.list.arizona.edu'
                    sh 'git config --local credential.helper "!p() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; p"'
                    
                    // Create new release branch and update POM's.
                    try {
                        sh "git checkout $RICE_DEV_BRANCH"
                        sh 'git status'
                        sh "git checkout -b $RICE_RELEASE_BRANCH"
                        sh 'git status'
                    }
                    catch (Exception e) {
                        echo "EXCP:CAUGHT: trying to checkout $RICE_RELEASE_VERSION"
                        echo "EXC: $e"
                        
                        // Ask user if we continue with release.  Continue or exit.
                        userInput = input(
                            id: 'userInput',    
                            message: 'Continue with Release?',    
                            parameters: [
                                [$class:'ChoiceParameterDefinition', 
                                choices: "YES\nNO",
                                name: 'Continue']
                            ]  
                        )
                        if (userInput == "YES") {
                            echo "You chose YES"
                        } else if (userInput == "NO"){
                            echo "You chose NO"
                            throw e
                        } 
                    }//end catch

                    // The develop branch is always one version ahead from what has been released, and the develop
                    // version also has an appended '-SNAPSHOT' string; the following will hunt out all POM files,
                    // remove that '-SNAPSHOT', which is how we need it for the release artifacts.
                    try {
                        sh 'mvn versions:set -DgenerateBackupPoms=false -DnewVersion="$RICE_RELEASE_VERSION"'
                        sh 'git diff'
                        sh 'git add .'
                        sh 'git commit -m "RCF-$RELEASE_TICKET-JenkinsRelease branch: Setting pom rice release version: $RICE_RELEASE_VERSION"'
                        sh 'git status'
                        sh "git push --set-upstream origin $RICE_RELEASE_BRANCH"
                    }
                    catch (Exception e){
                        echo "EXCP:CAUGHT: trying to set Release version $RICE_RELEASE_VERSION to branch $RICE_RELEASE_BRANCH"
                        echo "EXC: $e"
                        
                        // Ask user if we continue with release.  Continue or exit.
                        userInput = input(
                            id: 'userInput',    
                            message: 'Continue with Release?',    
                            parameters: [
                                [$class:'ChoiceParameterDefinition', 
                                choices: "YES\nNO",
                                name: 'Continue']
                            ]  
                        )
                        if (userInput == "YES") {
                            echo "You chose YES"
                        } else if (userInput == "NO"){
                            echo "You chose NO"
                            throw e
                        }                            
                    }//end catch

                }//end w/creds

            }//end stage

            stage ('Bump Rice Dev Branch') {        
                withCredentials([usernamePassword(credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) 
                {

                    cleanWs()                      
                    checkout([$class: 'GitSCM', branches: [[name: "*/$RICE_DEV_BRANCH"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', url: env.RICE_REPO_URL]]])
                    sh "git config user.name $GIT_USERNAME"
                    sh 'git config user.email katt-toolsadm@.list.arizona.edu'
                    sh 'git config --local credential.helper "!p() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; p"'

                    def Integer_Value = env.RELEASE_VERSION.toInteger()
                    ++Integer_Value
                    env.NEXT_DEV_VERSION="${env.RELEASE_PREFIX_RICE}$Integer_Value" + "-SNAPSHOT"
                    echo"NEXT_DEV_VERSION: $NEXT_DEV_VERSION"
  
                    try {
                        sh "git checkout $RICE_DEV_BRANCH"
                        sh 'git status'
                        sh 'mvn versions:set -DgenerateBackupPoms=false -DnewVersion="$NEXT_DEV_VERSION"'
                        sh 'git diff'
                        sh 'git add .'
                        sh 'git status'
                        sh 'git commit -m "RF-$RELEASE_TICKET-JenkinsRelease: Setting pom developer version: $NEXT_DEV_VERSION"'
                        sh 'git status'
                        sh 'git push'                            
                    }//end try
                    catch (Exception e) {
                        echo "EXCP:CAUGHT: trying to bump next dev version $NEXT_DEV_VERSION"
                        echo "EXC: $e"
                        
                        // Ask user if we continue with release.  Continue or exit.
                        userInput = input(
                            id: 'userInput',    
                            message: 'Continue with Release?',    
                            parameters: [
                                [$class:'ChoiceParameterDefinition', 
                                choices: "YES\nNO",
                                name: 'Continue']
                            ]  
                        )
                        if (userInput == "YES") {
                             echo "You chose YES"
                        } else if (userInput == "NO"){
                            echo "You chose NO"
                            throw e
                        } 
                    }//end catch

                }//end w/creds

            }

            stage ('Merge Rice Release to Master') {
                withCredentials([usernamePassword(credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    
                    cleanWs()
                    checkout([$class: 'GitSCM', branches: [[name: "*/$RICE_RELEASE_BRANCH"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', url: env.RICE_REPO_URL]]])  
                    sh "git config user.name $GIT_USERNAME"
                    sh 'git config user.email katt-toolsadm@.list.arizona.edu'
                    sh 'git config --local credential.helper "!p() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; p"'
 
                    try {
                        sh "git checkout $RICE_RELEASE_BRANCH"
                        sh 'git pull'
                        sh "git checkout $RICE_MASTER_BRANCH"
                        sh 'git pull'
                        sh 'git status'
                        sh "git merge origin/$RICE_RELEASE_BRANCH"
                        sh 'git status'
                        sh 'git push'
                        sh 'git status'
                    }//end try
                    catch (Exception e){
                        echo "EXCP:CAUGHT: trying to merge Rice Release to Master branch."
                        echo "EXC: $e"
                        
                        // Ask user if we continue with release.  Continue or exit.
                        userInput = input(
                            id: 'userInput',    
                            message: 'Continue with Release?',    
                            parameters: [
                                [$class:'ChoiceParameterDefinition', 
                                choices: "YES\nNO",
                                name: 'Continue']
                            ]  
                        )
                        if (userInput == "YES") {
                            echo "You chose YES"
                        } else if (userInput == "NO"){
                            echo "You chose NO"
                            throw e
                        }                            
                    }//end catch

                    // Tag Master post merge
                    //sh "git checkout $RICE_MASTER_BRANCH"
                    //sh 'git pull'
                    sh 'git tag -a "RF-TAG-$RICE_RELEASE_VERSION" -m "Jenkins: Release $RICE_RELEASE_VERSION"'
                    sh 'git push --tags'
                }

            }

            stage ('Merge Rice Release to Develop') {
                withCredentials([usernamePassword(credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    
                    cleanWs()
                    checkout([$class: 'GitSCM', branches: [[name: "*/$RICE_RELEASE_BRANCH"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', url: env.RICE_REPO_URL]]])  
                    sh "git config user.name $GIT_USERNAME"
                    sh 'git config user.email katt-toolsadm@.list.arizona.edu'
                    sh 'git config --local credential.helper "!p() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; p"'

                    // Hack so that merging release branch in won't cause pom conflicts
                    try {
                        sh "git checkout $RICE_RELEASE_BRANCH"
                        sh 'git pull'
                        sh 'mvn versions:set -DgenerateBackupPoms=false -DnewVersion="$NEXT_DEV_VERSION"'
                        sh 'git diff'
                        sh 'git add .'
                        sh 'git commit -m "Jenkins: Fast-forwarding release version to merge into develop"'
                        sh 'git push'  
                        sh 'git status'
                        
                        // Merge release into develop.
                        sh "git checkout $RICE_DEV_BRANCH"
                        sh 'git pull'
                        sh 'git status'
                        sh "git merge --no-edit origin/$RICE_RELEASE_BRANCH"
                        sh 'git push'
                        sh 'git status'

                        //  If not removing release then update POM's to correct $RICE_RELEASE_VERSION.
                        sh "git checkout $RICE_RELEASE_BRANCH"
                        sh 'git pull'
                        sh 'mvn versions:set -DgenerateBackupPoms=false -DnewVersion="$RICE_RELEASE_VERSION"'
                        sh 'git diff'
                        sh 'git add .'
                        sh 'git commit -m "Jenkins: Setting POM release version $RICE_RELEASE_VERSION"'
                        sh 'git push'
                        sh 'git status'
                    }
                    catch (Exception e){
                        echo "EXCP:CAUGHT: trying to merge Rice Release to Develop branch."
                        echo "EXC: $e"
                        
                        // Ask user if we continue with release.  Continue or exit.
                        userInput = input(
                            id: 'userInput',    
                            message: 'Continue with Release?',    
                            parameters: [
                                [$class:'ChoiceParameterDefinition', 
                                choices: "YES\nNO",
                                name: 'Continue']
                            ]  
                        )
                        if (userInput == "YES") {
                            echo "You chose YES"
                        } else if (userInput == "NO"){
                            echo "You chose NO"
                            throw e
                        }                            
                    }//end catch

                }//end w/creds

            }

            stage ('Build Rice') {   
                echo "Building Rice ..."
                build job: 'Rene - KFS 7 - Release Build - Rice', parameters: [string(name: 'RELEASE_VERSION', value: env.RELEASE_VERSION), string(name: 'RICE_APP_VERSION', value: env.RICE_RELEASE_VERSION)]
            }

            stage ('Update Rice Dependency'){        
                withCredentials([usernamePassword(credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    
                    // Update the version of the Rice dependency in the KFS dev project to be the new release version.
                    cleanWs()
                    checkout([$class: 'GitSCM', branches: [[name: env.KFS_DEV_BRANCH]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', url: env.KFS_REPO_URL]]])
                    sh "git config user.name $GIT_USERNAME"
                    sh 'git config user.email katt-toolsadm@.list.arizona.edu'
                    sh 'git config --local credential.helper "!p() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; p"'

                    try {
                        sh "git checkout $KFS_DEV_BRANCH"
                        sh 'git pull'

                        sh 'mvn versions:set-property -DgenerateBackupPoms=false -Dproperty=rice.version  -DnewVersion="$RICE_RELEASE_VERSION"'
                        sh 'git diff'
                        sh 'git add .'
                        sh 'git status'
                        sh 'git commit -m "JenkinsRelease: Updating version of rice dependency to be: $RICE_RELEASE_VERSION"'
                        sh 'git push'  
                        sh 'git status'                 
                    }   
                    catch (Exception e){
                        echo "EXCP:CAUGHT: trying to update Rice Dependency in KFS dev branch: $KFS_DEV_BRANCH "
                        echo "EXC: $e"
                        
                        // Ask user if we continue with release.  Continue or exit.
                        userInput = input(
                            id: 'userInput',    
                            message: 'Continue with Release?',    
                            parameters: [
                                [$class:'ChoiceParameterDefinition', 
                                choices: "YES\nNO",
                                name: 'Continue']
                            ]  
                        )
                        if (userInput == "YES") {
                            echo "You chose YES"
                        } else if (userInput == "NO"){
                            echo "You chose NO"
                            throw e
                        }                            
                    }//end catch
                    

                }//end w/creds

            }

            stage ('Create KFS Release Branch'){        
                withCredentials([usernamePassword(credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    cleanWs()                      
                    checkout([$class: 'GitSCM', branches: [[name: "*/$KFS_DEV_BRANCH"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', url: env.KFS_REPO_URL]]])
                    sh "git config user.name $GIT_USERNAME"
                    sh 'git config user.email katt-toolsadm@.list.arizona.edu'
                    sh 'git config --local credential.helper "!p() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; p"'
                    
                    // Create new release branch and update POM's.
                    try {
                        sh "git checkout $KFS_DEV_BRANCH"
                        sh "git status"
                        sh "git checkout -b $KFS_RELEASE_BRANCH"
                        sh 'git status'
                    }
                    catch (Exception e) {
                        echo "EXCP:CAUGHT: trying to checkout RCF-$KFS_RELEASE_VERSION"
                        echo "EXC: $e"
                        
                        // Ask user if we continue with release.  Continue or exit.
                        userInput = input(
                            id: 'userInput',    
                            message: 'Continue with Release?',    
                            parameters: [
                                [$class:'ChoiceParameterDefinition', 
                                choices: "YES\nNO",
                                name: 'Continue']
                            ]  
                        )
                        if (userInput == "YES") {
                            echo "You chose YES"
                        } else if (userInput == "NO"){
                            echo "You chose NO"
                            throw e
                        } 
                    }//end catch

                    // This truncates the '-SNAPSHOT' version from develop
                    try {
                        sh 'mvn versions:set -DgenerateBackupPoms=false -DnewVersion="$KFS_RELEASE_VERSION"'
                        sh 'git add .'
                        sh 'git commit -m "RCF-$RELEASE_TICKET-JenkinsRelease: Setting pom release version: $KFS_RELEASE_VERSION"'
                        sh 'git status'
                        sh "git push --set-upstream origin $KFS_RELEASE_BRANCH"
                    }
                    catch (Exception e) {
                        echo "EXCP:CAUGHT: trying to set KFS release branch $KFS_RELEASE_VERSION"
                        echo "EXC: $e"
                        
                        // Ask user if we continue with release.  Continue or exit.
                        userInput = input(
                            id: 'userInput',    
                            message: 'Continue with Release?',    
                            parameters: [
                                [$class:'ChoiceParameterDefinition', 
                                choices: "YES\nNO",
                                name: 'Continue']
                            ]  
                        )
                        if (userInput == "YES") {
                            echo "You chose YES"
                        } else if (userInput == "NO"){
                            echo "You chose NO"
                            throw e
                        } 
                    }//end catch
                    
                }
            }

            stage ('Bump KFS Dev Branch'){        
                withCredentials([usernamePassword(credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        
                    cleanWs() 
                    checkout([$class: 'GitSCM', branches: [[name: "*/$KFS_DEV_BRANCH"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', url: env.KFS_REPO_URL]]])
                    sh "git config user.name $GIT_USERNAME"
                    sh 'git config user.email katt-toolsadm@.list.arizona.edu'
                    sh 'git config --local credential.helper "!p() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; p"'

                    def Integer_Value = env.RELEASE_VERSION.toInteger()
                    ++Integer_Value
                    env.NEXT_DEV_VERSION_KFS="${env.RELEASE_PREFIX_KFS}$Integer_Value" + "-SNAPSHOT"
                    echo"NEXT_DEV_VERSION_KFS: $NEXT_DEV_VERSION_KFS"
                        
                    try {
                        sh "git checkout $KFS_DEV_BRANCH"
                        sh 'git status'
                        sh 'mvn versions:set -DgenerateBackupPoms=false -DnewVersion="$NEXT_DEV_VERSION_KFS"'
                        sh 'git diff'
                        sh 'git add .'
                        sh 'git status'
                        sh 'git commit -m "RCF-$RELEASE_TICKET-JenkinsRelease: Setting pom developer version: $NEXT_DEV_VERSION_KFS"'
                        sh 'git status'
                        sh 'git push'
                    }
                    catch (Exception e) {
                        echo "EXCP:CAUGHT: trying to bump next KFS dev version $NEXT_DEV_VERSION_KFS"
                        echo "EXC: $e"
                        
                        // Ask user if we continue with release.  Continue or exit.
                        userInput = input(
                            id: 'userInput',    
                            message: 'Continue with Release?',    
                            parameters: [
                                [$class:'ChoiceParameterDefinition', 
                                choices: "YES\nNO",
                                name: 'Continue']
                            ]  
                        )
                        if (userInput == "YES") {
                            echo "You chose YES"
                        } else if (userInput == "NO"){
                            echo "You chose NO"
                            throw e
                        } 
                    }//end catch

                }//end w/creds

            }  

            stage ('Merge KFS Release to Master'){
                withCredentials([usernamePassword(credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    
                    cleanWs()
                    checkout([$class: 'GitSCM', branches: [[name: "*/$KFS_RELEASE_BRANCH"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', url: env.KFS_REPO_URL]]])  
                    sh "git config user.name $GIT_USERNAME"
                    sh 'git config user.email katt-toolsadm@.list.arizona.edu'
                    sh 'git config --local credential.helper "!p() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; p"'

                    try {
                        sh "git checkout $KFS_RELEASE_BRANCH"
                        sh 'git pull' 
                        sh "git checkout $KFS_MASTER_BRANCH"
                        sh 'git pull'
                        sh 'git status'
                        sh "git merge origin/$KFS_RELEASE_BRANCH"
                        sh 'git push'
                        sh 'git status'
                    }
                    catch (Exception e){
                        echo "EXCP:CAUGHT: trying to merge KFS Release to Master branch."
                        echo "EXC: $e"
                        
                        // Ask user if we continue with release.  Continue or exit.
                        userInput = input(
                            id: 'userInput',    
                            message: 'Continue with Release?',    
                            parameters: [
                                [$class:'ChoiceParameterDefinition', 
                                choices: "YES\nNO",
                                name: 'Continue']
                            ]  
                        )
                        if (userInput == "YES") {
                            echo "You chose YES"
                        } else if (userInput == "NO"){
                            echo "You chose NO"
                            throw e
                        }                            
                    }//end catch
                   
                    // Tag Master post merge
                    //sh "git checkout $KFS_MASTER_BRANCH"
                    //sh 'git pull'
                    sh 'git tag -a "RF-TAG-$KFS_RELEASE_VERSION" -m "Jenkins: Release $KFS_RELEASE_VERSION"'
                    sh 'git push --tags'

                }//end w/creds

            }

            stage ('Merge KFS Release to Develop'){
                withCredentials([usernamePassword(credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {

                    cleanWs()
                    checkout([$class: 'GitSCM', branches: [[name: "*/$KFS_RELEASE_BRANCH"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'feb1872d-77aa-4ec0-be3f-c7d7d629f50e', url: env.KFS_REPO_URL]]])  
                    sh "git config user.name $GIT_USERNAME"
                    sh 'git config user.email katt-toolsadm@.list.arizona.edu'
                    sh 'git config --local credential.helper "!p() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; p"'

                    // Hack so that merging release branch in won't cause pom conflicts
                    try {
                        sh "git checkout $KFS_RELEASE_BRANCH"
                        sh 'git pull'
                        sh 'mvn versions:set -DgenerateBackupPoms=false -DnewVersion="$NEXT_DEV_VERSION_KFS"'
                        sh 'git diff'
                        sh 'git add .'
                        sh 'git commit -m "Jenkins: Fast-forwarding release version to merge into develop"'
                        sh 'git push'  
                        sh 'git status'

                        // Merge release into develop.
                        sh "git checkout $KFS_DEV_BRANCH"
                        sh 'git pull'
                        sh 'git status'
                        sh "git merge --no-edit origin/$KFS_RELEASE_BRANCH"
                        sh 'git push'
                        sh 'git status'

                        //  If not removing release then update POM's to correct $KFS_RELEASE_VERSION.
                        sh "git checkout $KFS_RELEASE_BRANCH"
                        sh 'git pull'
                        sh 'mvn versions:set -DgenerateBackupPoms=false -DnewVersion="$KFS_RELEASE_VERSION"'
                        sh 'git diff'
                        sh 'git add .'
                        sh 'git commit -m "Jenkins: Setting POM release version $KFS_RELEASE_VERSION"'
                        sh 'git push'
                        sh 'git status'
                    }
                    catch (Exception e){
                        echo "EXCP:CAUGHT: trying to merge Rice Release to Develop branch."
                        echo "EXC: $e"
                        
                        // Ask user if we continue with release.  Continue or exit.
                        userInput = input(
                            id: 'userInput',    
                            message: 'Continue with Release?',    
                            parameters: [
                                [$class:'ChoiceParameterDefinition', 
                                choices: "YES\nNO",
                                name: 'Continue']
                            ]  
                        )
                        if (userInput == "YES") {
                            echo "You chose YES"
                        } else if (userInput == "NO"){
                            echo "You chose NO"
                            throw e
                        }                            
                    }//end catch
                        
                }//end w/creds

            }

            stage ('Build KFS') {
                echo "Building KFS ..."
                build job: 'Rene - KFS 7 - Release Build - KFS', parameters: [string(name: 'RELEASE_VERSION', value: env.RELEASE_VERSION), string(name: 'KFS_APP_VERSION', value: env.KFS_RELEASE_VERSION)]
            }

        }//end stages        
    }
}
